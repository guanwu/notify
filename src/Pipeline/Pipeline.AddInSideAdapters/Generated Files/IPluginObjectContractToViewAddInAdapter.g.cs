//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Guanwu.Notify.AddInSideAdapters
{
    
    public class IPluginObjectContractToViewAddInAdapter : Guanwu.Notify.Views.IPluginObject
    {
        private Guanwu.Notify.IPluginObjectContract _contract;
        private System.AddIn.Pipeline.ContractHandle _handle;
        private Guanwu.Notify.AddInSideAdapters.IPipelineMessageEventHandlerViewToContractAddInAdapter OnMessageReceived_Handler;
        private Guanwu.Notify.AddInSideAdapters.IPipelineMessageEventHandlerViewToContractAddInAdapter OnMessagePersisting_Handler;
        private Guanwu.Notify.AddInSideAdapters.IPipelineMessageEventHandlerViewToContractAddInAdapter OnMessagePersisted_Handler;
        private Guanwu.Notify.AddInSideAdapters.IPipelineEventEventHandlerViewToContractAddInAdapter OnEventRaising_Handler;
        private Guanwu.Notify.AddInSideAdapters.IPipelineEventEventHandlerViewToContractAddInAdapter OnEventRaised_Handler;
        private static System.Reflection.MethodInfo s_MessageReceivedEventAddFire;
        private static System.Reflection.MethodInfo s_MessagePersistingEventAddFire;
        private static System.Reflection.MethodInfo s_MessagePersistedEventAddFire;
        private static System.Reflection.MethodInfo s_EventRaisingEventAddFire;
        private static System.Reflection.MethodInfo s_EventRaisedEventAddFire;
		public event System.EventHandler<Guanwu.Notify.Views.PipelineMessageEventArgs>OnMessageReceived{
			add{
				if (_OnMessageReceived == null)
				{
					_contract.MessageReceivedEventAdd(OnMessageReceived_Handler);
				}
				_OnMessageReceived += value;
				}
			remove{
					_OnMessageReceived -= value;
				if (_OnMessageReceived == null)
				{
					_contract.MessageReceivedEventRemove(OnMessageReceived_Handler);
				}
				}
		}		public event System.EventHandler<Guanwu.Notify.Views.PipelineMessageEventArgs>OnMessagePersisting{
			add{
				if (_OnMessagePersisting == null)
				{
					_contract.MessagePersistingEventAdd(OnMessagePersisting_Handler);
				}
				_OnMessagePersisting += value;
				}
			remove{
					_OnMessagePersisting -= value;
				if (_OnMessagePersisting == null)
				{
					_contract.MessagePersistingEventRemove(OnMessagePersisting_Handler);
				}
				}
		}		public event System.EventHandler<Guanwu.Notify.Views.PipelineMessageEventArgs>OnMessagePersisted{
			add{
				if (_OnMessagePersisted == null)
				{
					_contract.MessagePersistedEventAdd(OnMessagePersisted_Handler);
				}
				_OnMessagePersisted += value;
				}
			remove{
					_OnMessagePersisted -= value;
				if (_OnMessagePersisted == null)
				{
					_contract.MessagePersistedEventRemove(OnMessagePersisted_Handler);
				}
				}
		}		public event System.EventHandler<Guanwu.Notify.Views.PipelineEventEventArgs>OnEventRaising{
			add{
				if (_OnEventRaising == null)
				{
					_contract.EventRaisingEventAdd(OnEventRaising_Handler);
				}
				_OnEventRaising += value;
				}
			remove{
					_OnEventRaising -= value;
				if (_OnEventRaising == null)
				{
					_contract.EventRaisingEventRemove(OnEventRaising_Handler);
				}
				}
		}		public event System.EventHandler<Guanwu.Notify.Views.PipelineEventEventArgs>OnEventRaised{
			add{
				if (_OnEventRaised == null)
				{
					_contract.EventRaisedEventAdd(OnEventRaised_Handler);
				}
				_OnEventRaised += value;
				}
			remove{
					_OnEventRaised -= value;
				if (_OnEventRaised == null)
				{
					_contract.EventRaisedEventRemove(OnEventRaised_Handler);
				}
				}
		}
        static IPluginObjectContractToViewAddInAdapter()
        {
            s_MessageReceivedEventAddFire = typeof(IPluginObjectContractToViewAddInAdapter).GetMethod("Fire_OnMessageReceived", ((System.Reflection.BindingFlags)(36)));
            s_MessagePersistingEventAddFire = typeof(IPluginObjectContractToViewAddInAdapter).GetMethod("Fire_OnMessagePersisting", ((System.Reflection.BindingFlags)(36)));
            s_MessagePersistedEventAddFire = typeof(IPluginObjectContractToViewAddInAdapter).GetMethod("Fire_OnMessagePersisted", ((System.Reflection.BindingFlags)(36)));
            s_EventRaisingEventAddFire = typeof(IPluginObjectContractToViewAddInAdapter).GetMethod("Fire_OnEventRaising", ((System.Reflection.BindingFlags)(36)));
            s_EventRaisedEventAddFire = typeof(IPluginObjectContractToViewAddInAdapter).GetMethod("Fire_OnEventRaised", ((System.Reflection.BindingFlags)(36)));
        }
        public IPluginObjectContractToViewAddInAdapter(Guanwu.Notify.IPluginObjectContract contract)
        {
            _contract = contract;
            _handle = new System.AddIn.Pipeline.ContractHandle(contract);
            OnMessageReceived_Handler = new Guanwu.Notify.AddInSideAdapters.IPipelineMessageEventHandlerViewToContractAddInAdapter(this, s_MessageReceivedEventAddFire);
            OnMessagePersisting_Handler = new Guanwu.Notify.AddInSideAdapters.IPipelineMessageEventHandlerViewToContractAddInAdapter(this, s_MessagePersistingEventAddFire);
            OnMessagePersisted_Handler = new Guanwu.Notify.AddInSideAdapters.IPipelineMessageEventHandlerViewToContractAddInAdapter(this, s_MessagePersistedEventAddFire);
            OnEventRaising_Handler = new Guanwu.Notify.AddInSideAdapters.IPipelineEventEventHandlerViewToContractAddInAdapter(this, s_EventRaisingEventAddFire);
            OnEventRaised_Handler = new Guanwu.Notify.AddInSideAdapters.IPipelineEventEventHandlerViewToContractAddInAdapter(this, s_EventRaisedEventAddFire);
        }
        private event System.EventHandler<Guanwu.Notify.Views.PipelineMessageEventArgs> _OnMessageReceived;
        private event System.EventHandler<Guanwu.Notify.Views.PipelineMessageEventArgs> _OnMessagePersisting;
        private event System.EventHandler<Guanwu.Notify.Views.PipelineMessageEventArgs> _OnMessagePersisted;
        private event System.EventHandler<Guanwu.Notify.Views.PipelineEventEventArgs> _OnEventRaising;
        private event System.EventHandler<Guanwu.Notify.Views.PipelineEventEventArgs> _OnEventRaised;
        internal virtual void Fire_OnMessageReceived(Guanwu.Notify.Views.PipelineMessageEventArgs args)
        {
            if ((_OnMessageReceived == null))
            {
            }
            else
            {
                _OnMessageReceived.Invoke(this, args);
            }
        }
        internal virtual void Fire_OnMessagePersisting(Guanwu.Notify.Views.PipelineMessageEventArgs args)
        {
            if ((_OnMessagePersisting == null))
            {
            }
            else
            {
                _OnMessagePersisting.Invoke(this, args);
            }
        }
        internal virtual void Fire_OnMessagePersisted(Guanwu.Notify.Views.PipelineMessageEventArgs args)
        {
            if ((_OnMessagePersisted == null))
            {
            }
            else
            {
                _OnMessagePersisted.Invoke(this, args);
            }
        }
        internal virtual void Fire_OnEventRaising(Guanwu.Notify.Views.PipelineEventEventArgs args)
        {
            if ((_OnEventRaising == null))
            {
            }
            else
            {
                _OnEventRaising.Invoke(this, args);
            }
        }
        internal virtual void Fire_OnEventRaised(Guanwu.Notify.Views.PipelineEventEventArgs args)
        {
            if ((_OnEventRaised == null))
            {
            }
            else
            {
                _OnEventRaised.Invoke(this, args);
            }
        }
        public void ReceiveMessage(Guanwu.Notify.Views.PipelineMessage pMessage)
        {
            _contract.ReceiveMessage(Guanwu.Notify.AddInSideAdapters.PipelineMessageAddInAdapter.ViewToContractAdapter(pMessage));
        }
        public void PersistingMessage(Guanwu.Notify.Views.PipelineMessage pMessage)
        {
            _contract.PersistingMessage(Guanwu.Notify.AddInSideAdapters.PipelineMessageAddInAdapter.ViewToContractAdapter(pMessage));
        }
        public void PersistedMessage(Guanwu.Notify.Views.PipelineMessage pMessage)
        {
            _contract.PersistedMessage(Guanwu.Notify.AddInSideAdapters.PipelineMessageAddInAdapter.ViewToContractAdapter(pMessage));
        }
        public void RaisingEvent(Guanwu.Notify.Views.PipelineEvent pEvent)
        {
            _contract.RaisingEvent(Guanwu.Notify.AddInSideAdapters.PipelineEventAddInAdapter.ViewToContractAdapter(pEvent));
        }
        public void RaisedEvent(Guanwu.Notify.Views.PipelineEvent pEvent)
        {
            _contract.RaisedEvent(Guanwu.Notify.AddInSideAdapters.PipelineEventAddInAdapter.ViewToContractAdapter(pEvent));
        }
        internal Guanwu.Notify.IPluginObjectContract GetSourceContract()
        {
            return _contract;
        }
    }
}

